#!/bin/bash

container_name="dev-container-zig"

root=$(realpath "$(dirname $0)/..")
container_dir=$(dirname "$0")/../containers
compose_file="${container_dir}/docker-compose.yml"
env_file="${root}/.env"

source $env_file

#default arguments
rebuild=false
user="developer"
shell="zsh"

# check input args
while [ $# -gt 0 ]; do
  case "$1" in
  --build)
    rebuild=true
    ;;
  --root)
    user="root"
    ;;
  -c=* | --command=*)
    command="${1#*=}"
    ;;
  -s=* | --shell=*)
    shell="${1#*=}"
    ;;
  --cwd=*)
    cwd="${1#*=}"
    ;;
  *)
    if [[ $1 != -* ]] && [ -z "$service" ]; then
      # don't take anything that starts with '-'
      # and only take an image one time
      # that prevents, that typos or unknown flags are interpreted as container
      service="${1}"
    else
      echo "Unknown Argument: '$1'"
    fi
    ;;
  esac
  shift
done

#echo "rebuild: $rebuild
#user:    $user
#command: $command
#shell:   $shell
#cwd:     $cwd
#service: $service
#------------------"

compose="docker compose -f $compose_file --env-file $env_file"

cwd=""
if [ -z "$cwd" ]; then
  eval host_path=$PROJECT_PATH_HOST   # resolve tilde
  host_path=$(readlink -f $host_path) # resolve relative path

  working_dir=$(pwd)
  container_cwd="${working_dir/$host_path/}" # replace $host_path with '' (nothing) in working_dir

  echo "
  $working_dir - $host_path = $container_cwd"

  echo "test container pwd $host_path/$container_cwd"
  if [ -d $host_path/$container_cwd ]; then
    echo "exists! we use $container_cwd"
    cwd=$container_cwd
  fi
fi
echo "cwd=$cwd"

# validate service name
if ! $compose config --services | grep -q "^${service}$"; then
  echo "There is no dev-container with the name '${service}'"
  exit 1
fi

compose_args="--user=$user --rm $service"

if $rebuild; then
  compose_args="--build $compose_args"
fi

compose_args="$compose_args sh -c '"'cd "$PROJECT_PATH'/$cwd'"'" &&"

if [ -n "$command" ]; then
  compose_args="$compose_args $command"
else
  compose_args="$compose_args $shell"
fi

compose_args="$compose_args'"

eval "$compose run $compose_args"
